"""Generate content for empty concept notes with complete Zettelkasten structure."""

import re
from pathlib import Path
from typing import List, Dict
from zettelkasten.core.config import Config
from zettelkasten.generators.note_content_generator import NoteContentGenerator


class OrphanNoteGenerator:
    """Generate complete concept notes for empty files using Claude."""

    def __init__(self, config: Config):
        """
        Initialize OrphanNoteGenerator.

        Args:
            config: Application configuration
        """
        self.config = config
        self.content_generator = NoteContentGenerator(config)

    def fill_empty_note(self, filepath: Path, backlink_sources: List[Dict] = None) -> str:
        """
        Generate a complete concept note for an empty file.

        Creates a full Zettelkasten note with:
        - Description/summary generated by Claude
        - Key Quotes section (empty template)
        - Related Notes section with backlinks pointing to this file

        Backlinks are discovered by finding other permanent notes that reference
        this concept in their Related Notes sections. Links point to the current
        file path to ensure correct bidirectional linking.

        For completely empty files, creates full frontmatter and structure.
        For files with existing structure, preserves it.

        Args:
            filepath: Path to the empty note file being filled
            backlink_sources: Optional list of dicts with 'title' and 'relative_path'
                            for each source note that references this concept

        Returns:
            Updated markdown content with full concept note structure
        """
        # Read the existing file
        content = filepath.read_text()

        # Extract the relative path for use in backlinks
        # Format: permanent-notes/20251024145426-concept-name
        relative_filepath = str(filepath.relative_to(filepath.parent.parent))

        # Check if file is completely empty
        if not content or not content.strip():
            # Extract title from filename
            filename = filepath.stem
            # Remove timestamp prefix (format: 20251024145426-title)
            parts = filename.split("-", 1)
            if len(parts) > 1:
                title = parts[1].replace("-", " ").title()
            else:
                title = filename

            # Generate complete note content with auto-fill
            note_content = self.content_generator.generate_concept_note_content(
                title, backlink_sources, auto_fill=True
            )

            # Create full note structure
            from datetime import datetime
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            lines = []
            lines.append("---")
            lines.append(f"title: {title}")
            lines.append(f"created: {timestamp}")
            lines.append("tags: [concept, permanent-note]")
            lines.append("---")
            lines.append("")
            lines.append(f"# {title}")
            lines.append("")
            lines.extend(note_content)
            lines.append("")

            return "\n".join(lines)

        # File has content - extract existing structure
        # Extract frontmatter
        frontmatter_match = re.match(r"^(---\s*\n.*?\n---\s*\n)", content, re.DOTALL)
        if frontmatter_match:
            frontmatter = frontmatter_match.group(1)
            after_frontmatter = content[frontmatter_match.end():]
        else:
            raise ValueError(f"Note {filepath} does not have valid frontmatter")

        # Extract title from frontmatter
        title_match = re.search(r"title:\s*(.+?)(?:\n|$)", frontmatter)
        if not title_match:
            raise ValueError(f"Could not extract title from {filepath}")

        title = title_match.group(1).strip().strip('"\'')

        # Extract title heading if present
        heading_match = re.search(r"^#\s+(.+?)$", after_frontmatter, re.MULTILINE)
        if heading_match:
            heading = heading_match.group(0)
        else:
            heading = f"# {title}"

        # Generate complete note content with auto-fill
        note_content = self.content_generator.generate_concept_note_content(
            title, backlink_sources, auto_fill=True
        )

        # Build the updated content
        lines = []
        lines.append(frontmatter.rstrip())
        lines.append("")
        lines.append(heading)
        lines.append("")
        lines.extend(note_content)
        lines.append("")

        return "\n".join(lines)

